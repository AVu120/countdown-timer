{"version":3,"sources":["components/Inputs/Inputs.module.css","components/Title/Title.module.css","components/App/App.module.css","components/Countdown/Countdown-Item/Countdown-Item.module.css","components/Countdown/Countdown.module.css","sounds/alarm-clock-bell-sound.mp3","components/Countdown/Countdown-Item/Countdown-Item.js","components/Countdown/Countdown.js","components/common/Buttons/Action-Button.js","components/common/Datetime-Input/Datetime-Input.js","components/common/Text-Input/Text-Input.js","components/Inputs/Inputs.style.js","components/Inputs/Inputs.js","components/common/Icons/HelpIcon.js","components/Title/Title.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","CountdownItem","value","title","className","css","countdown__item","countdown__itemTitle","Countdown","timeLeft","countdown","years","months","days","hours","minutes","seconds","ActionButton","iconStyle","color","actions","timerStatus","IconButton","size","Tooltip","aria-label","style","onClick","startCountdown","resetCountdown","DatetimeInput","datetimeSelected","changeDatetimeSelected","onChange","dateFormat","TextInput","label","inputStyle","labelStyle","noValidate","autoComplete","TextField","id","variant","inputProps","InputLabelProps","eventInputStyle","height","width","fontSize","eventInputLabelStyle","actionIconStyle","padding","Inputs","changeEventName","inputs","input_item","input_actionButton","HelpIconComponent","Title","eventName","titleClassName","title__topRow","countdownStatus","title__helpIcon","HelpIcon","title__doneMessage","App","useState","setEventName","moment","setDatetimeSelected","setTimeLeft","useEffect","setInterval","now","currentTimeLeft","duration","diff","asSeconds","clearInterval","alert","app","app__title","app__title_timerDone","event","target","selectedDatetime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38a6a16a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputs\":\"Inputs_inputs__3_wLU\",\"input_item\":\"Inputs_input_item__KT_52\",\"input_actionButton\":\"Inputs_input_actionButton__2vOGd Inputs_input_item__KT_52\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__1zt3G\",\"title__topRow\":\"Title_title__topRow__1Hngn\",\"title__doneMessage\":\"Title_title__doneMessage__1UN3W\",\"title__helpIcon\":\"Title_title__helpIcon__3i_u2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2P5NG\",\"app__title\":\"App_app__title__1sS4S\",\"app__title_timerDone\":\"App_app__title_timerDone__1MVbb App_app__title__1sS4S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countdown__item\":\"Countdown-Item_countdown__item__47KLP\",\"countdown__itemTitle\":\"Countdown-Item_countdown__itemTitle__1z5D2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countdown\":\"Countdown_countdown__21zoI\"};","module.exports = __webpack_public_path__ + \"static/media/alarm-clock-bell-sound.c4ccb051.mp3\";","import React from \"react\";\r\nimport css from \"./Countdown-Item.module.css\";\r\n\r\nconst CountdownItem = ({ value, title }) => {\r\n  return (\r\n    <div>\r\n      {(value || value === 0) && (\r\n        <div className={css.countdown__item}>\r\n          {value}\r\n          <span className={css.countdown__itemTitle}>{title}</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountdownItem;\r\n","import React from \"react\";\r\nimport CountdownItem from \"./Countdown-Item/Countdown-Item\";\r\nimport css from \"./Countdown.module.css\";\r\n\r\nconst Countdown = ({ timeLeft }) => {\r\n  return (\r\n    <div className={css.countdown}>\r\n      {timeLeft.years > 0 && (\r\n        <CountdownItem value={timeLeft.years} title=\"YEARS\" />\r\n      )}\r\n      {timeLeft.months > 0 && (\r\n        <CountdownItem value={timeLeft.months} title=\"MONTHS\" />\r\n      )}\r\n      <CountdownItem value={timeLeft.days} title=\"DAYS\" />\r\n      <CountdownItem value={timeLeft.hours} title=\"HOURS\" />\r\n      <CountdownItem value={timeLeft.minutes} title=\"MINUTES\" />\r\n      <CountdownItem value={timeLeft.seconds} title=\"SECONDS\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countdown;\r\n","import IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport React from \"react\";\r\n\r\nconst ActionButton = ({ iconStyle, color, actions, timerStatus }) => (\r\n  <IconButton size=\"small\">\r\n    {(timerStatus === \"idle\" ||\r\n      timerStatus === \"reset\" ||\r\n      timerStatus === \"done\") && (\r\n      <Tooltip title=\"Start Countdown\" aria-label=\"add\">\r\n        <PlayArrowIcon\r\n          style={iconStyle}\r\n          color={color}\r\n          onClick={() => actions.startCountdown()}\r\n        />\r\n      </Tooltip>\r\n    )}\r\n    {timerStatus === \"running\" && (\r\n      <Tooltip title=\"Reset Timer to 0\" aria-label=\"add\">\r\n        <RefreshIcon\r\n          style={iconStyle}\r\n          color={color}\r\n          onClick={() => actions.resetCountdown()}\r\n        />\r\n      </Tooltip>\r\n    )}\r\n  </IconButton>\r\n);\r\nexport default ActionButton;\r\n","import React from \"react\";\r\nimport Datetime from \"react-datetime\";\r\nimport \"./react-datetime.css\";\r\n\r\nconst DatetimeInput = ({\r\n  className,\r\n  datetimeSelected,\r\n  changeDatetimeSelected,\r\n}) => {\r\n  return (\r\n    <div className={className}>\r\n      <Datetime\r\n        value={datetimeSelected}\r\n        onChange={changeDatetimeSelected}\r\n        dateFormat=\"DD/MM/YYYY\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatetimeInput;\r\n","import TextField from \"@material-ui/core/TextField\";\r\nimport React from \"react\";\r\n\r\nconst TextInput = ({ label, onChange, className, inputStyle, labelStyle }) => {\r\n  return (\r\n    <form className={className} noValidate autoComplete=\"off\">\r\n      <TextField\r\n        id=\"outlined-basic\"\r\n        label={label}\r\n        variant=\"outlined\"\r\n        onChange={onChange}\r\n        inputProps={{ style: inputStyle }}\r\n        InputLabelProps={{ style: labelStyle }}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","export const eventInputStyle = {\r\n  height: \"15px\",\r\n  width: \"10vw\",\r\n  fontSize: \"2vh\",\r\n};\r\nexport const eventInputLabelStyle = { fontSize: \"2vh\" };\r\nexport const actionIconStyle = {\r\n  padding: \"1vh\",\r\n  fontSize: \"4.5vh\",\r\n};\r\n","import React from \"react\";\r\nimport ActionButton from \"../common/Buttons/Action-Button\";\r\nimport DatetimeInput from \"../common/Datetime-Input/Datetime-Input\";\r\nimport EventNameInput from \"../common/Text-Input/Text-Input\";\r\nimport * as style from \"./Inputs.style\";\r\nimport css from \"./Inputs.module.css\";\r\n\r\nexport const Inputs = ({\r\n  changeEventName,\r\n  datetimeSelected,\r\n  changeDatetimeSelected,\r\n  actions,\r\n  timerStatus,\r\n}) => {\r\n  return (\r\n    <div className={css.inputs}>\r\n      <EventNameInput\r\n        className={css.input_item}\r\n        label=\"Event Name\"\r\n        onChange={changeEventName}\r\n        inputStyle={style.eventInputStyle}\r\n        labelStyle={style.eventInputLabelStyle}\r\n      />\r\n      <DatetimeInput\r\n        className={css.input_item}\r\n        datetimeSelected={datetimeSelected}\r\n        changeDatetimeSelected={changeDatetimeSelected}\r\n      />\r\n      <div className={css.input_actionButton}>\r\n        <ActionButton\r\n          iconStyle={style.actionIconStyle}\r\n          actions={actions}\r\n          timerStatus={timerStatus}\r\n          color=\"primary\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Inputs;\r\n","import React from \"react\";\r\nimport HelpIcon from \"@material-ui/icons/Help\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst HelpIconComponent = ({ title, iconStyle }) => (\r\n  <Tooltip title={title}>\r\n    <HelpIcon style={iconStyle} />\r\n  </Tooltip>\r\n);\r\n\r\nexport default HelpIconComponent;\r\n","import React from \"react\";\r\nimport HelpIcon from \"../common/Icons/HelpIcon\";\r\nimport css from \"./Title.module.css\";\r\n\r\nconst Title = ({ timeLeft, eventName, titleClassName }) => {\r\n  return (\r\n    <div className={css.title}>\r\n      <div className={css.title__topRow}>\r\n        <h1 className={titleClassName}>\r\n          {timeLeft.countdownStatus !== \"done\"\r\n            ? \"Countdown Timer\"\r\n            : `${eventName || \"Event\"} has started!`}\r\n        </h1>\r\n        <div className={css.title__helpIcon}>\r\n          <HelpIcon\r\n            title={\r\n              <div>\r\n                <h2>Instructions:</h2>\r\n                <p>\r\n                  1. Enter the name of the event you want to count down to using\r\n                  the 1st input.\r\n                </p>\r\n                <p>\r\n                  2. Select the date and time when this event starts using the\r\n                  2nd input.\r\n                </p>\r\n                <p>\r\n                  3. Click the play button to start the countdown to the event.\r\n                </p>\r\n                <p>\r\n                  4. Click the reset button during the countdown to stop and\r\n                  reset the countdown to 0.\r\n                </p>\r\n              </div>\r\n            }\r\n            iconStyle={{ fontSize: \"3vh\" }}\r\n          />\r\n        </div>\r\n      </div>\r\n      {timeLeft.countdownStatus === \"done\" && (\r\n        <h3 id=\"message\" className={css.title__doneMessage}>\r\n          Select another date & time and press play to start countdown again.\r\n        </h3>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Countdown from \"../Countdown/Countdown\";\r\nimport Inputs from \"../Inputs/Inputs\";\r\nimport css from \"./App.module.css\";\r\nimport Title from \"../Title/Title\";\r\nimport alarmBellSoundFile from \"../../sounds/alarm-clock-bell-sound.mp3\";\r\n\r\nconst App = () => {\r\n  const [eventName, setEventName] = useState(\"\");\r\n  const [datetimeSelected, setDatetimeSelected] = useState(moment());\r\n  const [timeLeft, setTimeLeft] = useState({\r\n    years: \"0\",\r\n    months: \"0\",\r\n    days: \"0\",\r\n    hours: \"0\",\r\n    minutes: \"0\",\r\n    seconds: \"0\",\r\n    countdownStatus: \"idle\",\r\n  });\r\n  // const alarmBellSound = new Audio(alarmBellSoundFile);\r\n  const changeEventName = (event) => setEventName(event.target.value);\r\n  const changeDatetimeSelected = (selectedDatetime) => {\r\n    if (typeof selectedDatetime !== \"string\") {\r\n      setDatetimeSelected(selectedDatetime);\r\n    }\r\n  };\r\n\r\n  const startCountdown = () => {\r\n    const now = moment();\r\n    if (datetimeSelected - now > 0) {\r\n      const timeLeft = moment.duration(datetimeSelected.diff(now));\r\n      setTimeLeft({\r\n        years: timeLeft.years(),\r\n        months: timeLeft.months(),\r\n        days: timeLeft.days(),\r\n        hours: timeLeft.hours(),\r\n        minutes: timeLeft.minutes(),\r\n        seconds: timeLeft.seconds(),\r\n        countdownStatus: \"running\",\r\n      });\r\n    } else alert(\"Please select datetime in future.\");\r\n  };\r\n\r\n  const resetCountdown = () => {\r\n    setDatetimeSelected(moment());\r\n    setTimeLeft({\r\n      years: \"0\",\r\n      months: \"0\",\r\n      days: \"0\",\r\n      hours: \"0\",\r\n      minutes: \"0\",\r\n      seconds: \"0\",\r\n      countdownStatus: \"reset\",\r\n    });\r\n  };\r\n\r\n  /* After user selects datetime, start countdown (decrementing by 1s).\r\n  Countdown will stop when the component unmounts (i.e. when the user selects another datetime, causing the component to unmount then mount again).\r\n  The countdown restarts when the component remounts. */\r\n  useEffect(() => {\r\n    const startCountdown = setInterval(() => {\r\n      const now = moment();\r\n      const currentTimeLeft = moment.duration(datetimeSelected.diff(now));\r\n      if (currentTimeLeft.asSeconds() > 0)\r\n        setTimeLeft({\r\n          ...timeLeft,\r\n          years: currentTimeLeft.years(),\r\n          months: currentTimeLeft.months(),\r\n          days: currentTimeLeft.days(),\r\n          hours: currentTimeLeft.hours(),\r\n          minutes: currentTimeLeft.minutes(),\r\n          seconds: currentTimeLeft.seconds(),\r\n        });\r\n      else {\r\n        clearInterval(startCountdown);\r\n        setTimeLeft({\r\n          months: \"0\",\r\n          days: \"0\",\r\n          hours: \"0\",\r\n          minutes: \"0\",\r\n          seconds: \"0\",\r\n          countdownStatus:\r\n            timeLeft.countdownStatus === \"idle\"\r\n              ? \"idle\"\r\n              : timeLeft.countdownStatus === \"running\" ||\r\n                timeLeft.countdownStatus === \"done\"\r\n              ? \"done\"\r\n              : \"reset\",\r\n        });\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(startCountdown);\r\n  }, [timeLeft.countdownStatus]);\r\n\r\n  /* Fire alarm & event notification only if timer successly counts down to 0,\r\n     (timeLeft.countdownStatus === \"done\")\r\n     not when application initially loads (timeLeft.countdownStatus === \"idle\")\r\n     or when user restarts timer to 0 (timeLeft.countdownStatus === \"restart\") */\r\n  useEffect(() => {\r\n    if (timeLeft.countdownStatus === \"done\") {\r\n      // alarmBellSound.play();\r\n    }\r\n  }, [timeLeft.countdownStatus]);\r\n\r\n  const actions = { startCountdown, resetCountdown };\r\n  return (\r\n    <div className={css.app}>\r\n      <Title\r\n        timeLeft={timeLeft}\r\n        eventName={eventName}\r\n        titleClassName={\r\n          timeLeft.countdownStatus !== \"done\"\r\n            ? css.app__title\r\n            : css.app__title_timerDone\r\n        }\r\n      />\r\n      <Countdown timeLeft={timeLeft} />\r\n      <Inputs\r\n        eventName={eventName}\r\n        changeEventName={changeEventName}\r\n        datetimeSelected={datetimeSelected}\r\n        changeDatetimeSelected={changeDatetimeSelected}\r\n        actions={actions}\r\n        timerStatus={timeLeft.countdownStatus}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}